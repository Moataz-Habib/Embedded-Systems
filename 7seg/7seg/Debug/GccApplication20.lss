
GccApplication20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000057e  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000227  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e6  00000000  00000000  00000e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002b  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

int main(void)
{
	unsigned  char count =0;
	DDRC=0xff;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD=0x00;
  70:	11 ba       	out	0x11, r1	; 17
	PORTC=0;
  72:	15 ba       	out	0x15, r1	; 21
	PORTD=0xff;
  74:	82 bb       	out	0x12, r24	; 18

#include <avr/io.h>

int main(void)
{
  76:	80 e0       	ldi	r24, 0x00	; 0
	PORTD=0xff;

    while (1) 
    {
		
		if (!(PIND&(1<<PIND0)))
  78:	80 99       	sbic	0x10, 0	; 16
  7a:	07 c0       	rjmp	.+14     	; 0x8a <main+0x1e>
		{
			if (count==9)
  7c:	89 30       	cpi	r24, 0x09	; 9
  7e:	09 f4       	brne	.+2      	; 0x82 <main+0x16>
			{
				count=8;
  80:	88 e0       	ldi	r24, 0x08	; 8
			}
			PORTC=++count;
  82:	8f 5f       	subi	r24, 0xFF	; 255
  84:	85 bb       	out	0x15, r24	; 21
			while(!(PIND&(1<<PIND0)));
  86:	80 9b       	sbis	0x10, 0	; 16
  88:	fe cf       	rjmp	.-4      	; 0x86 <main+0x1a>
		}
		
		if (!(PIND&(1<<PIND1)))
  8a:	81 99       	sbic	0x10, 1	; 16
  8c:	07 c0       	rjmp	.+14     	; 0x9c <main+0x30>
		{
			if (count==0)
  8e:	81 11       	cpse	r24, r1
  90:	01 c0       	rjmp	.+2      	; 0x94 <main+0x28>
			{
				count=1;
  92:	81 e0       	ldi	r24, 0x01	; 1
			}
			PORTC=--count;
  94:	81 50       	subi	r24, 0x01	; 1
  96:	85 bb       	out	0x15, r24	; 21
			while(!(PIND&(1<<PIND1)));
  98:	81 9b       	sbis	0x10, 1	; 16
  9a:	fe cf       	rjmp	.-4      	; 0x98 <main+0x2c>

		}
		if (!(PIND&(1<<PIND2)))
  9c:	82 99       	sbic	0x10, 2	; 16
  9e:	ec cf       	rjmp	.-40     	; 0x78 <main+0xc>
		{
			
			count=0;
			PORTC=count;
  a0:	15 ba       	out	0x15, r1	; 21
			while(!(PIND&(1<<PIND2)));
  a2:	82 9b       	sbis	0x10, 2	; 16
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x36>
  a6:	e7 cf       	rjmp	.-50     	; 0x76 <main+0xa>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
